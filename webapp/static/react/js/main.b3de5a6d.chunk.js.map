{"version":3,"sources":["Components/Form.js","Components/Home.js","Components/DataDisplay.js","Components/App.js","Components/serviceWorker.js","index.js"],"names":["props","className","action","name","placeholder","type","id","accept","alt","onChange","required","htmlFor","Form","Data","src","process","React","Component","App","state","uploading","received","e","files","Array","from","target","setState","formData","FormData","append","fetch","method","body","then","data","console","log","this","image","classification","Home","content","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+SAEe,G,MAAA,SAAAA,GAAK,OAEhB,0BAAMC,UAAW,cAAeC,OAAQ,WAEpC,yBAAKD,UAAW,aAEZ,2BAAOE,KAAM,SAAUC,YAAa,UAAWC,KAAM,WAKrD,2BAAOF,KAAM,SAAUC,YAAa,UAAWC,KAAM,YAGzD,6BACI,2BAAOA,KAAK,OAAOF,KAAK,OAAOG,GAAG,OAAOL,UAAW,aAAcM,OAAQ,UACnEC,IAAK,oBAAqBC,SAAUT,EAAMS,SAAUC,UAAQ,IACnE,2BAAOC,QAAQ,OAAOV,UAAW,cAAjC,qBChBG,WAACD,GAAD,OACX,yBAAKC,UAAU,OACX,yBAAKA,UAAW,sBACZ,yBAAKA,UAAW,cACZ,4BAAQA,UAAW,cACf,wBAAIA,UAAW,gBAAf,kBACA,wFAMZ,kBAACW,EAAD,CAAMH,SAAUT,EAAMS,aCDfI,G,uLARP,OACI,yBAAKZ,UAAW,iBACZ,yBAAKa,IAAKC,kCAA+CP,IAAK,UAAWP,UAAU,uB,GALhFe,IAAMC,YC0EVC,E,2MAtEXC,MAAQ,CACJC,WAAW,EACXC,UAAU,G,EAGdZ,SAAW,SAAAa,GACP,IAAMC,EAAQC,MAAMC,KAAKH,EAAEI,OAAOH,OAClC,EAAKI,SAAS,CAACP,WAAW,IAE1B,IAAMQ,EAAW,IAAIC,SAErBD,EAASE,OAAO,IAAKP,EAAM,IAqB3BQ,MAAM,+BAAgC,CAClCC,OAAQ,OACRC,KAAML,IAELM,MAAK,SAAAC,GACFC,QAAQC,IAAIF,GACZ,EAAKR,SAAS,CACVP,WAAW,EACXC,UAAU,Q,wEAQhB,IAAD,SACgDiB,KAAKnB,MAAnDC,EADF,EACEA,UAAWC,EADb,EACaA,SADb,EACuBkB,MADvB,EAC8BC,eAanC,OACI,6BAZY,WACZ,QAAQ,GACJ,KAAKpB,EACD,OAAO,uCACX,KAAKC,EACD,OAAO,kBAAC,EAAD,MACX,QACI,OAAQ,kBAACoB,EAAD,CAAMhC,SAAU,EAAKA,YAMhCiC,Q,GAlEC1B,IAAMC,WCOJ0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"js/main.b3de5a6d.chunk.js","sourcesContent":["import React from 'react'\n\nexport default props =>\n\n    <form className={\"Input-group\"} action={\"/result\"}>\n\n        <div className={\"num-input\"}>\n            {/*<label htmlFor={\"xcoord\"}>x: </label>*/}\n            <input name={\"xcoord\"} placeholder={\"y: 0.00\"} type={\"number\"}/>\n            {/*</div>*/}\n\n            {/*<div className={\"num-input\"}>*/}\n            {/*<label htmlFor={\"ycoord\"}>y: </label>*/}\n            <input name={\"ycoord\"} placeholder={\"x: 0.00\"} type={\"number\"}/>\n        </div>\n\n        <div>\n            <input type=\"file\" name=\"file\" id=\"file\" className={\"Input-file\"} accept={\"image/*\"}\n                   alt={\"arial photo input\"} onChange={props.onChange} required/>\n            <label htmlFor=\"file\" className={\"Input-name\"}\n            >Choose a file</label>\n            \n            {/*<Link to={\"/result\"}>Link test here</Link>*/}\n        </div>\n    </form>","import React from 'react'\nimport Form from \"./Form\";\n\nexport default (props) =>\n    <div className=\"App\">\n        <div className={\"App-center-wrapper\"}>\n            <div className={\"App-center\"}>\n                <header className={\"App-header\"}>\n                    <h1 className={\"Header-title\"}>HURRICANE HERO</h1>\n                    <p>The greatest weather damage analyzer on Earth. Period.</p>\n                </header>\n\n                {/*<p>testing {this.state.username}</p>*/}\n            </div>\n        </div>\n        <Form onChange={props.onChange}/>\n    </div>","import React from 'react'\nimport \"../styles/results.css\"\n\nclass Data extends React.Component {\n\n    render() {\n        return (\n            <div className={\"App-Secondary\"}>\n                <img src={process.env.PUBLIC_URL + \"/images/wassup.png\"} alt={\"dataset\"} className=\"overlay-image\"/>\n            </div>\n        )\n    }\n}\n\nexport default Data","import React from 'react';\nimport '../styles/home.css';\nimport Home from \"./Home\";\nimport Overlay from \"./DataDisplay\";\n\nclass App extends React.Component {\n\n    state = {\n        uploading: false,\n        received: false,\n    }\n\n    onChange = e => {\n        const files = Array.from(e.target.files)\n        this.setState({uploading: true})\n\n        const formData = new FormData()\n        //\n        formData.append(\"0\", files[0])\n        // console.log(files[0])\n        // fetch(`${\"https://image-classification.cognitiveservices.azure.com/customvision/v3.0/Prediction/2744fc95-61ce-4f3a-a4d6-e0fad1647c9c/classify/iterations/Iteration3/url\"}`, {\n        //     method: 'POST',\n        //     body: {\"Url\": \"https://cbsnews1.cbsistatic.com/hub/i/2018/09/12/96f981d8-2b5f-4bde-a092-8ea3aa621af9/florence3.jpg\"},\n        //     'Prediction-Key': 'ba8e403c3f904d85adf408928b13fa90',\n        //     'Content-Type': 'application/json'\n\n\n        // fetch(`${\"http://finddamaged-env.jvxwipk8ke.us-east-2.elasticbeanstalk.com/find\"}`, {\n        //     method: 'POST',\n        //     body: files[0],\n        // })\n        //     .then(res => res.json())\n        //     .then(data => {\n        //         console.log(data)\n        //         this.setState({\n        //             received: true\n        //         })\n        //     })\n\n        fetch('http://localhost:5000/upload', {\n            method: 'POST',\n            body: formData\n        })\n            .then(data => {\n                console.log(data)\n                this.setState({\n                    uploading: false,\n                    received: true,\n                    // image: data\n                })\n            })\n\n        \n    }\n\n    render() {\n        const {uploading, received, image, classification} = this.state\n\n        const content = () => {\n            switch (true) {\n                case uploading:\n                    return <div>hol up</div>;\n                case received:\n                    return <Overlay />;\n                default:\n                    return (<Home onChange={this.onChange}/>);\n            }\n        };\n\n        return (\n            <div>\n                {content()}\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './Components/serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}